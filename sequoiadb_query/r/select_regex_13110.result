set names latin1;
drop table if exists t1;
create table t1 as
select repeat(' ', 64) as s1, repeat(' ',64) as s2
union
select null, null;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `s1` varchar(64) DEFAULT NULL,
  `s2` varchar(64) DEFAULT NULL
) ENGINE=SEQUOIADB DEFAULT CHARSET=latin1
delete from t1;
insert into t1 values('aaa','aaa');
insert into t1 values('aaa|qqq','qqq');
insert into t1 values('gheis','^[^a-dXYZ]+$');
insert into t1 values('aab','^aa?b');
insert into t1 values('Baaan','^Ba*n');
insert into t1 values('aaa','qqq|aaa');
insert into t1 values('qqq','qqq|aaa');
insert into t1 values('bbb','qqq|aaa');
insert into t1 values('bbb','qqq');
insert into t1 values('aaa','aba');
insert into t1 values(null,'abc');
insert into t1 values('def',null);
insert into t1 values(null,null);
insert into t1 values('ghi','ghi[');
select HIGH_PRIORITY s1 regexp s2 from t1;
s1 regexp s2
1
1
1
1
1
1
1
0
0
0
NULL
NULL
NULL
NULL
drop table t1;
drop table if exists table_regex_t1;
create table table_regex_t1 (xxx char(128));
insert into table_regex_t1 (xxx) values('this is a test of some long text to see what happens');
select * from table_regex_t1 where xxx regexp('is a test of some long text to');
xxx
this is a test of some long text to see what happens
explain extended select * from table_regex_t1 where xxx regexp('is a test of some long text to');
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	table_regex_t1	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	Using where
Warnings:
Warning	1681	'EXTENDED' is deprecated and will be removed in a future release.
Note	1003	/* select#1 */ select `test`.`table_regex_t1`.`xxx` AS `xxx` from `test`.`table_regex_t1` where (`test`.`table_regex_t1`.`xxx` regexp 'is a test of some long text to')
select * from table_regex_t1 where xxx regexp('is a test of some long text to ');
xxx
this is a test of some long text to see what happens
select * from table_regex_t1 where xxx regexp('is a test of some long text to s');
xxx
this is a test of some long text to see what happens
select * from table_regex_t1 where xxx regexp('is a test of some long text to se');
xxx
this is a test of some long text to see what happens
drop table table_regex_t1;
create table table_regex_t1 (xxx char(128));
insert into table_regex_t1 (xxx) values('this is some text: to test - out.reg exp (22/45)');
select * from table_regex_t1 where xxx REGEXP '^this is some text: to test - out\\.reg exp [[(][0-9]+[/\\][0-9]+[])][ ]*$';
xxx
this is some text: to test - out.reg exp (22/45)
drop table table_regex_t1;
create table table_regex_t1 (a varchar(40));
insert into table_regex_t1 values ('C1'),('C2'),('R1'),('C3'),('R2'),('R3');
prepare stmtable_regex_t1 from 'select a from table_regex_t1 where a rlike ? order by a';
set @a="^C.*";
execute stmtable_regex_t1 using @a;
a
C1
C2
C3
set @a="^R.*";
execute stmtable_regex_t1 using @a;
a
R1
R2
R3
deallocate prepare stmtable_regex_t1;
drop table table_regex_t1;
CREATE TABLE table_regex_t1(a INT, b CHAR(4));
INSERT INTO table_regex_t1 VALUES (1, '6.1'), (1, '7.0'), (1, '8.0');
PREPARE stmtable_regex_t1 FROM "SELECT a FROM table_regex_t1 WHERE a=1 AND '7.0' REGEXP b LIMIT 1";
EXECUTE stmtable_regex_t1;
a
1
EXECUTE stmtable_regex_t1;
a
1
EXECUTE stmtable_regex_t1;
a
1
EXECUTE stmtable_regex_t1;
a
1
DEALLOCATE PREPARE stmtable_regex_t1;
DROP TABLE table_regex_t1;
