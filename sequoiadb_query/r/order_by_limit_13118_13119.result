# Testcase for order by limit
drop table if exists table_limit_t0,table_limit_t1,table_limit_t2;
Warnings:
Note	1051	Unknown table 'test.table_limit_t0'
Note	1051	Unknown table 'test.table_limit_t1'
Note	1051	Unknown table 'test.table_limit_t2'
CREATE TABLE table_limit_t1 (
pk INT PRIMARY KEY,
i INT,
j INT,
INDEX (i),
INDEX (j)
);
INSERT INTO table_limit_t1 (pk,i,j) VALUES (1,1,1);
set @d=2;
INSERT INTO table_limit_t1 (pk,i,j) SELECT pk+@d, i+@d, j+@d from table_limit_t1;
set @d=@d*2;
INSERT INTO table_limit_t1 (pk,i,j) SELECT pk+@d, i+@d, j+@d from table_limit_t1;
set @d=@d*2;
INSERT INTO table_limit_t1 (pk,i,j) SELECT pk+@d, i+@d, j+@d from table_limit_t1;
set @d=@d*2;
INSERT INTO table_limit_t1 (pk,i,j) SELECT pk+@d, i+@d, j+@d from table_limit_t1;
set @d=@d*2;
INSERT INTO table_limit_t1 (pk,i,j) SELECT pk+@d, i+@d, j+@d from table_limit_t1;
set @d=@d*2;
INSERT INTO table_limit_t1 (pk,i,j) SELECT pk+@d, i+@d, j+@d from table_limit_t1;
set @d=@d*2;
INSERT INTO table_limit_t1 (pk,i,j) SELECT pk+@d, i+@d, j+@d from table_limit_t1;
set @d=@d*2;
ANALYZE TABLE table_limit_t1;
Table	Op	Msg_type	Msg_text
test.table_limit_t1	analyze	note	The storage engine for the table doesn't support analyze
EXPLAIN SELECT * FROM table_limit_t1
WHERE i<100 AND j<10
ORDER BY i LIMIT 5;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	table_limit_t1	NULL	range	i,j	i	5	NULL	1	5.00	Using where with pushed condition ((`test`.`table_limit_t1`.`i` < 100) and (`test`.`table_limit_t1`.`j` < 10))
Warnings:
Note	1003	/* select#1 */ select `test`.`table_limit_t1`.`pk` AS `pk`,`test`.`table_limit_t1`.`i` AS `i`,`test`.`table_limit_t1`.`j` AS `j` from `test`.`table_limit_t1` where ((`test`.`table_limit_t1`.`i` < 100) and (`test`.`table_limit_t1`.`j` < 10)) order by `test`.`table_limit_t1`.`i` limit 5
SELECT * FROM table_limit_t1
WHERE i<100 AND j<10
ORDER BY i LIMIT 5;
pk	i	j
1	1	1
3	3	3
5	5	5
7	7	7
9	9	9
DROP TABLE table_limit_t1;
CREATE TABLE table_limit_t0 (
i0 INTEGER NOT NULL
);
INSERT INTO table_limit_t0 VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
CREATE TABLE table_limit_t1 (
pk INTEGER PRIMARY KEY default 0,
i1 INTEGER NOT NULL,
i2 INTEGER NOT NULL,
INDEX k1 (i1),
INDEX k2 (i1,i2)
) ENGINE=SequoiaDB;
INSERT INTO table_limit_t1
SELECT a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0,
(a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0) % 1000,
(a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0) % 1000
FROM table_limit_t0 AS a0, table_limit_t0 AS a1;
CREATE TABLE table_limit_t2 (
pk INTEGER PRIMARY KEY default 0,
i1 INTEGER NOT NULL,
INDEX k1 (i1)
) ENGINE=SequoiaDB;
INSERT INTO table_limit_t2
SELECT a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0,
(a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0) % 500
FROM table_limit_t0 AS a0, table_limit_t0 AS a1;
ANALYZE TABLE table_limit_t1,table_limit_t2;
Table	Op	Msg_type	Msg_text
test.table_limit_t1	analyze	note	The storage engine for the table doesn't support analyze
test.table_limit_t2	analyze	note	The storage engine for the table doesn't support analyze
# Query should use index to optimize the ORDER BY LIMIT
EXPLAIN SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 and table_limit_t1.i1 > 2
ORDER BY table_limit_t1.i1 LIMIT 2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	table_limit_t1	NULL	range	PRIMARY,k1,k2	PRIMARY	4	NULL	1	5.00	Using where with pushed condition ((`test`.`table_limit_t1`.`pk` > 7000) and (`test`.`table_limit_t1`.`i1` > 2)); Using filesort
1	SIMPLE	table_limit_t2	NULL	ref	k1	k1	4	test.table_limit_t1.i1	12	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`table_limit_t1`.`pk` AS `pk`,`test`.`table_limit_t1`.`i1` AS `i1`,`test`.`table_limit_t1`.`i2` AS `i2`,`test`.`table_limit_t2`.`pk` AS `pk`,`test`.`table_limit_t2`.`i1` AS `i1` from `test`.`table_limit_t1` straight_join `test`.`table_limit_t2` where ((`test`.`table_limit_t2`.`i1` = `test`.`table_limit_t1`.`i1`) and (`test`.`table_limit_t1`.`pk` > 7000) and (`test`.`table_limit_t1`.`i1` > 2)) order by `test`.`table_limit_t1`.`i1` limit 2
# Query should not make the switch to use index to
# optimize ORDER BY LIMIT. So should be using filesort
EXPLAIN SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 and table_limit_t1.i1 > 2
ORDER BY table_limit_t1.i1 LIMIT 5;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	table_limit_t1	NULL	range	PRIMARY,k1,k2	PRIMARY	4	NULL	1	5.00	Using where with pushed condition ((`test`.`table_limit_t1`.`pk` > 7000) and (`test`.`table_limit_t1`.`i1` > 2)); Using filesort
1	SIMPLE	table_limit_t2	NULL	ref	k1	k1	4	test.table_limit_t1.i1	12	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`table_limit_t1`.`pk` AS `pk`,`test`.`table_limit_t1`.`i1` AS `i1`,`test`.`table_limit_t1`.`i2` AS `i2`,`test`.`table_limit_t2`.`pk` AS `pk`,`test`.`table_limit_t2`.`i1` AS `i1` from `test`.`table_limit_t1` straight_join `test`.`table_limit_t2` where ((`test`.`table_limit_t2`.`i1` = `test`.`table_limit_t1`.`i1`) and (`test`.`table_limit_t1`.`pk` > 7000) and (`test`.`table_limit_t1`.`i1` > 2)) order by `test`.`table_limit_t1`.`i1` limit 5
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 and table_limit_t1.i1 > 2
ORDER BY table_limit_t1.i1 LIMIT 5;
pk	i1	i2	pk	i1
7070	70	70	7070	70
8080	80	80	8080	80
9090	90	90	9090	90
7171	171	171	7171	171
8181	181	181	8181	181
# Changing range condition on i1 should make
# key on i1 get picked to give the order
EXPLAIN SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 and table_limit_t1.i1 > 800
ORDER BY table_limit_t1.i1 LIMIT 5;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	table_limit_t1	NULL	range	PRIMARY,k1,k2	PRIMARY	4	NULL	1	100.00	Using where with pushed condition ((`test`.`table_limit_t1`.`pk` > 7000) and (`test`.`table_limit_t1`.`i1` > 800)); Using filesort
1	SIMPLE	table_limit_t2	NULL	ref	k1	k1	4	test.table_limit_t1.i1	12	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`table_limit_t1`.`pk` AS `pk`,`test`.`table_limit_t1`.`i1` AS `i1`,`test`.`table_limit_t1`.`i2` AS `i2`,`test`.`table_limit_t2`.`pk` AS `pk`,`test`.`table_limit_t2`.`i1` AS `i1` from `test`.`table_limit_t1` straight_join `test`.`table_limit_t2` where ((`test`.`table_limit_t2`.`i1` = `test`.`table_limit_t1`.`i1`) and (`test`.`table_limit_t1`.`pk` > 7000) and (`test`.`table_limit_t1`.`i1` > 800)) order by `test`.`table_limit_t1`.`i1` limit 5
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 and table_limit_t1.i1 > 800
ORDER BY table_limit_t1.i1 LIMIT 5;
pk	i1	i2	pk	i1
# Use range condition only on pk to see if switch
# happens just for ORDER BY LIMIT
# Should not happen unless range results in too
# many records
EXPLAIN SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 ORDER BY table_limit_t1.i1 LIMIT 5;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	table_limit_t1	NULL	range	PRIMARY,k1,k2	PRIMARY	4	NULL	1	100.00	Using where with pushed condition (`test`.`table_limit_t1`.`pk` > 7000); Using filesort
1	SIMPLE	table_limit_t2	NULL	ref	k1	k1	4	test.table_limit_t1.i1	12	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`table_limit_t1`.`pk` AS `pk`,`test`.`table_limit_t1`.`i1` AS `i1`,`test`.`table_limit_t1`.`i2` AS `i2`,`test`.`table_limit_t2`.`pk` AS `pk`,`test`.`table_limit_t2`.`i1` AS `i1` from `test`.`table_limit_t1` straight_join `test`.`table_limit_t2` where ((`test`.`table_limit_t2`.`i1` = `test`.`table_limit_t1`.`i1`) and (`test`.`table_limit_t1`.`pk` > 7000)) order by `test`.`table_limit_t1`.`i1` limit 5
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 ORDER BY table_limit_t1.i1 LIMIT 5;
pk	i1	i2	pk	i1
7070	70	70	7070	70
8080	80	80	8080	80
9090	90	90	9090	90
7171	171	171	7171	171
8181	181	181	8181	181
EXPLAIN SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 1000 ORDER BY table_limit_t1.i1 LIMIT 5;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	table_limit_t1	NULL	range	PRIMARY,k1,k2	PRIMARY	4	NULL	1	100.00	Using where with pushed condition (`test`.`table_limit_t1`.`pk` > 1000); Using filesort
1	SIMPLE	table_limit_t2	NULL	ref	k1	k1	4	test.table_limit_t1.i1	12	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`table_limit_t1`.`pk` AS `pk`,`test`.`table_limit_t1`.`i1` AS `i1`,`test`.`table_limit_t1`.`i2` AS `i2`,`test`.`table_limit_t2`.`pk` AS `pk`,`test`.`table_limit_t2`.`i1` AS `i1` from `test`.`table_limit_t1` straight_join `test`.`table_limit_t2` where ((`test`.`table_limit_t2`.`i1` = `test`.`table_limit_t1`.`i1`) and (`test`.`table_limit_t1`.`pk` > 1000)) order by `test`.`table_limit_t1`.`i1` limit 5
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 1000 ORDER BY table_limit_t1.i1 LIMIT 5;
pk	i1	i2	pk	i1
1010	10	10	1010	10
2020	20	20	2020	20
3030	30	30	3030	30
4040	40	40	4040	40
5050	50	50	5050	50
# check if switch happens when the index for order 
# by is non-covering
EXPLAIN SELECT table_limit_t1.i1,table_limit_t1.i2 FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1 
WHERE table_limit_t1.pk > 100 ORDER BY table_limit_t1.i1 LIMIT 5;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	table_limit_t1	NULL	range	PRIMARY,k1,k2	PRIMARY	4	NULL	1	100.00	Using where with pushed condition (`test`.`table_limit_t1`.`pk` > 100); Using filesort
1	SIMPLE	table_limit_t2	NULL	ref	k1	k1	4	test.table_limit_t1.i1	12	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`table_limit_t1`.`i1` AS `i1`,`test`.`table_limit_t1`.`i2` AS `i2` from `test`.`table_limit_t1` straight_join `test`.`table_limit_t2` where ((`test`.`table_limit_t2`.`i1` = `test`.`table_limit_t1`.`i1`) and (`test`.`table_limit_t1`.`pk` > 100)) order by `test`.`table_limit_t1`.`i1` limit 5
SELECT table_limit_t1.i1,table_limit_t1.i2 FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1 
WHERE table_limit_t1.pk > 100 ORDER BY table_limit_t1.i1 LIMIT 5;
i1	i2
10	10
20	20
30	30
40	40
50	50
# Reduce the fanout for table table_limit_t2 and check
# that index for order by is not choosen
EXPLAIN SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 and table_limit_t2.pk = 100 ORDER BY table_limit_t1.i1 LIMIT 5;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	table_limit_t1	NULL	range	PRIMARY,k1,k2	PRIMARY	4	NULL	1	100.00	Using where with pushed condition (`test`.`table_limit_t1`.`pk` > 7000); Using filesort
1	SIMPLE	table_limit_t2	NULL	const	PRIMARY,k1	PRIMARY	4	const	1	10.00	Using where
Warnings:
Note	1003	/* select#1 */ select `test`.`table_limit_t1`.`pk` AS `pk`,`test`.`table_limit_t1`.`i1` AS `i1`,`test`.`table_limit_t1`.`i2` AS `i2`,`test`.`table_limit_t2`.`pk` AS `pk`,`test`.`table_limit_t2`.`i1` AS `i1` from `test`.`table_limit_t1` straight_join `test`.`table_limit_t2` where ((`test`.`table_limit_t2`.`i1` = `test`.`table_limit_t1`.`i1`) and (`test`.`table_limit_t2`.`pk` = 100) and (`test`.`table_limit_t1`.`pk` > 7000)) order by `test`.`table_limit_t1`.`i1` limit 5
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 and table_limit_t2.pk = 100 ORDER BY table_limit_t1.i1 LIMIT 5;
pk	i1	i2	pk	i1
# Increase the fanout to see if index gets choosen
# for order by for which range scan was choosen
# earlier
INSERT INTO table_limit_t2
SELECT a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0 + 1,
(a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0) % 500
FROM table_limit_t0 AS a0, table_limit_t0 AS a1;
ANALYZE TABLE table_limit_t2;
Table	Op	Msg_type	Msg_text
test.table_limit_t2	analyze	note	The storage engine for the table doesn't support analyze
EXPLAIN SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 ORDER BY table_limit_t1.i1 LIMIT 5;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	table_limit_t1	NULL	range	PRIMARY,k1,k2	PRIMARY	4	NULL	1	100.00	Using where with pushed condition (`test`.`table_limit_t1`.`pk` > 7000); Using filesort
1	SIMPLE	table_limit_t2	NULL	ref	k1	k1	4	test.table_limit_t1.i1	12	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`table_limit_t1`.`pk` AS `pk`,`test`.`table_limit_t1`.`i1` AS `i1`,`test`.`table_limit_t1`.`i2` AS `i2`,`test`.`table_limit_t2`.`pk` AS `pk`,`test`.`table_limit_t2`.`i1` AS `i1` from `test`.`table_limit_t1` straight_join `test`.`table_limit_t2` where ((`test`.`table_limit_t2`.`i1` = `test`.`table_limit_t1`.`i1`) and (`test`.`table_limit_t1`.`pk` > 7000)) order by `test`.`table_limit_t1`.`i1` limit 5
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 ORDER BY table_limit_t1.i1 LIMIT 5;
pk	i1	i2	pk	i1
7070	70	70	7070	70
7070	70	70	7071	70
8080	80	80	8080	80
8080	80	80	8081	80
9090	90	90	9090	90
# Check if the index for order by is used when
# force index is done on order by
EXPLAIN SELECT * FROM table_limit_t1 FORCE INDEX FOR ORDER BY (k2) STRAIGHT_JOIN table_limit_t2 ON
table_limit_t1.i1=table_limit_t2.i1 WHERE table_limit_t1.pk > 7000 ORDER BY table_limit_t1.i1 LIMIT 5;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	table_limit_t1	NULL	index	PRIMARY,k1,k2	k2	8	NULL	0	0.00	Using where with pushed condition (`test`.`table_limit_t1`.`pk` > 7000)
1	SIMPLE	table_limit_t2	NULL	ref	k1	k1	4	test.table_limit_t1.i1	12	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`table_limit_t1`.`pk` AS `pk`,`test`.`table_limit_t1`.`i1` AS `i1`,`test`.`table_limit_t1`.`i2` AS `i2`,`test`.`table_limit_t2`.`pk` AS `pk`,`test`.`table_limit_t2`.`i1` AS `i1` from `test`.`table_limit_t1` FORCE INDEX FOR ORDER BY (`k2`) straight_join `test`.`table_limit_t2` where ((`test`.`table_limit_t2`.`i1` = `test`.`table_limit_t1`.`i1`) and (`test`.`table_limit_t1`.`pk` > 7000)) order by `test`.`table_limit_t1`.`i1` limit 5
SELECT * FROM table_limit_t1 FORCE INDEX FOR ORDER BY (k2) STRAIGHT_JOIN table_limit_t2 ON
table_limit_t1.i1=table_limit_t2.i1 WHERE table_limit_t1.pk > 7000 ORDER BY table_limit_t1.i1 LIMIT 5;
pk	i1	i2	pk	i1
7070	70	70	7070	70
7070	70	70	7071	70
8080	80	80	8080	80
8080	80	80	8081	80
9090	90	90	9090	90
DROP TABLE table_limit_t0, table_limit_t1, table_limit_t2;
