
--echo # Testcase for order by limit

--source suite/sequoiadb_query/include/have_sequoiadb.inc

drop table if exists table_limit_t0,table_limit_t1,table_limit_t2;

CREATE TABLE table_limit_t1 (
  pk INT PRIMARY KEY,
  i INT,
  j INT,
  INDEX (i),
  INDEX (j)
);

INSERT INTO table_limit_t1 (pk,i,j) VALUES (1,1,1);

let $1=7;
set @d=2;
while ($1)
{
  eval INSERT INTO table_limit_t1 (pk,i,j) SELECT pk+@d, i+@d, j+@d from table_limit_t1;
  eval set @d=@d*2;
  dec $1;
}

ANALYZE TABLE table_limit_t1;

let $query= SELECT * FROM table_limit_t1
            WHERE i<100 AND j<10
            ORDER BY i LIMIT 5;
eval EXPLAIN $query;
eval $query;
DROP TABLE table_limit_t1;

CREATE TABLE table_limit_t0 (
  i0 INTEGER NOT NULL
);

INSERT INTO table_limit_t0 VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);

CREATE TABLE table_limit_t1 (
  pk INTEGER PRIMARY KEY default 0,
  i1 INTEGER NOT NULL,
  i2 INTEGER NOT NULL,
  INDEX k1 (i1),
  INDEX k2 (i1,i2)
) ENGINE=SequoiaDB;

INSERT INTO table_limit_t1
SELECT a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0,
       (a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0) % 1000,
       (a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0) % 1000
FROM table_limit_t0 AS a0, table_limit_t0 AS a1;

CREATE TABLE table_limit_t2 (
  pk INTEGER PRIMARY KEY default 0,
  i1 INTEGER NOT NULL,
  INDEX k1 (i1)
) ENGINE=SequoiaDB;

INSERT INTO table_limit_t2
SELECT a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0,
              (a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0) % 500
  FROM table_limit_t0 AS a0, table_limit_t0 AS a1;

ANALYZE TABLE table_limit_t1,table_limit_t2;

--echo # Query should use index to optimize the ORDER BY LIMIT

let query=
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 and table_limit_t1.i1 > 2
ORDER BY table_limit_t1.i1 LIMIT 2;

eval EXPLAIN $query;

--echo # Query should not make the switch to use index to
--echo # optimize ORDER BY LIMIT. So should be using filesort

let query=
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 and table_limit_t1.i1 > 2
ORDER BY table_limit_t1.i1 LIMIT 5;

eval EXPLAIN $query;
eval $query;

--echo # Changing range condition on i1 should make
--echo # key on i1 get picked to give the order

let query=
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 and table_limit_t1.i1 > 800
ORDER BY table_limit_t1.i1 LIMIT 5;

eval EXPLAIN $query;
eval $query;

--echo # Use range condition only on pk to see if switch
--echo # happens just for ORDER BY LIMIT
--echo # Should not happen unless range results in too
--echo # many records

let query=
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 ORDER BY table_limit_t1.i1 LIMIT 5;

eval EXPLAIN $query;
eval $query;

let query=
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 1000 ORDER BY table_limit_t1.i1 LIMIT 5;

eval EXPLAIN $query;
eval $query;

--echo # check if switch happens when the index for order 
--echo # by is non-covering

let query=
SELECT table_limit_t1.i1,table_limit_t1.i2 FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1 
WHERE table_limit_t1.pk > 100 ORDER BY table_limit_t1.i1 LIMIT 5;

eval EXPLAIN $query;
eval $query;

--echo # Reduce the fanout for table table_limit_t2 and check
--echo # that index for order by is not choosen

let query=
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 and table_limit_t2.pk = 100 ORDER BY table_limit_t1.i1 LIMIT 5;

eval EXPLAIN $query;
eval $query;

--echo # Increase the fanout to see if index gets choosen
--echo # for order by for which range scan was choosen
--echo # earlier

INSERT INTO table_limit_t2
SELECT a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0 + 1,
              (a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0) % 500
  FROM table_limit_t0 AS a0, table_limit_t0 AS a1;

ANALYZE TABLE table_limit_t2;

let query=
SELECT * FROM table_limit_t1 STRAIGHT_JOIN table_limit_t2 ON table_limit_t1.i1=table_limit_t2.i1
WHERE table_limit_t1.pk > 7000 ORDER BY table_limit_t1.i1 LIMIT 5;

eval EXPLAIN $query;
eval $query;

--echo # Check if the index for order by is used when
--echo # force index is done on order by

let query=
SELECT * FROM table_limit_t1 FORCE INDEX FOR ORDER BY (k2) STRAIGHT_JOIN table_limit_t2 ON
table_limit_t1.i1=table_limit_t2.i1 WHERE table_limit_t1.pk > 7000 ORDER BY table_limit_t1.i1 LIMIT 5;

eval EXPLAIN $query;
eval $query;

DROP TABLE table_limit_t0, table_limit_t1, table_limit_t2;

--source suite/sequoiadb_query/include/uninstall_sequoiadb.inc
