#
# Check some special create statements.
#

--source suite/sequoiadb_datatype/include/have_sequoiadb.inc

--disable_warnings
drop table if exists table_create_t1,table_create_t2,table_create_t3,table_create_t4,table_create_t5;
drop database if exists mysqltest;
drop view if exists v1;
--enable_warnings

SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
create table table_create_t1 (b char(0));
insert into table_create_t1 values (""),(null);
select * from table_create_t1;
drop table if exists table_create_t1;

create table table_create_t1 (b char(0) not null);
create table if not exists table_create_t1 (b char(0) not null);
insert into table_create_t1 values (""),(null);
select * from table_create_t1;
drop table table_create_t1;

create table table_create_t1 (a int not null,primary key (a));
drop table table_create_t1;

#
# Test of some CREATE TABLE'S that should fail
#

--error 1146
create table table_create_t2 select * from table_create_t1;
--error 1146
create table table_create_t2 select auto+1 from table_create_t1;
drop table if exists table_create_t1,table_create_t2;
--error 1167
create table table_create_t1 (b char(0) not null, index(b));
drop table if exists table_create_t1;

-- error 1049
create table not_existing_database.test (a int);
create table `a` (a int);
show create table `a`;
create table table_create_t1 like `a`;
drop table `a`;
drop table `table_create_t1`;
--error ER_TOO_LONG_IDENT
create table `aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa` (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa int);
--error 1059
create table a (`aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa` int);

#
# Some wrong defaults, so these creates should fail too (Bug #5902)
#
--error 1067
create table table_create_t1 (a tinyint default 1000);
--error 1067
create table table_create_t1 (a varchar(5) default 'abcdef');

create table table_create_t1 (a varchar(5) default 'abcde');
insert into table_create_t1 values();
select * from table_create_t1;
--error 1067
alter table table_create_t1 alter column a set default 'abcdef';
drop table table_create_t1;

--error 1103
create table `` (a int);
--error 1103
drop table if exists ``;
--error 1166
create table table_create_t1 (`` int);
--error 1280
create table table_create_t1 (i int, index `` (i)); 

#
# CREATE TABLE under LOCK TABLES
#
# We don't allow creation of non-temporary tables under LOCK TABLES
# as following meta-data locking protocol in this case can lead to
# deadlock.
create table table_create_t1 (i int);
lock tables table_create_t1 read;
--error ER_TABLE_NOT_LOCKED
create table table_create_t2 (j int);
# OTOH creating of temporary table should be OK
create temporary table table_create_t2 (j int);
drop temporary table table_create_t2;
unlock tables;
drop table table_create_t1;

#
# Test of CREATE ... SELECT with indexes
#

create table table_create_t1 (a int not null primary key, B CHAR(20));
insert into table_create_t1 (a, b) values (0, "hello"),(1, "my"),(2, "world");
create table table_create_t2 (key (b)) select * from table_create_t1;
explain select * from table_create_t2 where b="world";
select * from table_create_t2 where b="world";
drop table table_create_t1,table_create_t2;

#
# Test types after CREATE ... SELECT
#

create table table_create_t1(x varchar(50) );
create table table_create_t2 select x from table_create_t1 where 1=2;
describe table_create_t1;
describe table_create_t2;
drop table table_create_t2;
create table table_create_t2 select now() as a , curtime() as b, curdate() as c , 1+1 as d , 1.0 + 1 as e , 33333333333333333 + 3 as f;
describe table_create_t2;
drop table table_create_t2;
create table table_create_t2 select CAST("2001-12-29" AS DATE) as d, CAST("20:45:11" AS TIME) as t, CAST("2001-12-29  20:45:11" AS DATETIME) as dt;
describe table_create_t2;
drop table table_create_t1,table_create_t2;

#
# Test of CREATE ... SELECT with duplicate fields
#

create table table_create_t1 (a tinyint);
create table table_create_t2 (a int) select * from table_create_t1;                        
describe table_create_t1;
describe table_create_t2;
drop table if exists table_create_t2;
--error 1060
create table table_create_t2 (a int, a float) select * from table_create_t1;               
drop table if exists table_create_t2;
--error 1060
create table table_create_t2 (a int) select a as b, a+1 as b from table_create_t1;         
drop table if exists table_create_t2;
--error 1060
create table table_create_t2 (b int) select a as b, a+1 as b from table_create_t1;         
drop table if exists table_create_t1,table_create_t2;

#
# Test CREATE ... SELECT when insert fails
#

CREATE TABLE table_create_t1 (a int not null);
INSERT INTO table_create_t1 values (1),(2),(1);
--error 1030
CREATE TABLE table_create_t2 (primary key(a)) SELECT * FROM table_create_t1;
--error 1146
SELECT * from table_create_t2;
DROP TABLE table_create_t1;
DROP TABLE IF EXISTS table_create_t2;

#
# ISO requires that primary keys are implicitly NOT NULL
#
create table table_create_t1 ( k1 varchar(2), k2 int, primary key(k1,k2));
insert into table_create_t1 values ("a", 1), ("b", 2);
--error 1048
insert into table_create_t1 values ("c", NULL);
--error 1048
insert into table_create_t1 values (NULL, 3);
--error 1048
insert into table_create_t1 values (NULL, NULL);
drop table table_create_t1;

#
# Bug # 801
#

create table table_create_t1 select x'4132';
drop table table_create_t1;

#
# bug #1434
#

create table table_create_t1 select 1,2,3;
create table if not exists table_create_t1 select 1,2;
create table if not exists table_create_t1 select 1,2,3,4;
create table if not exists table_create_t1 select 1;
select * from table_create_t1;
drop table table_create_t1;

#
# Test create table if not exists with duplicate key error
#

flush status;
create table table_create_t1 (a int not null, b int, primary key (a));
insert into table_create_t1 values (1,1);
create table if not exists table_create_t1 select 2;
select * from table_create_t1;
create table if not exists table_create_t1 select 3 as 'a',4 as 'b';
show warnings;
show status like "Opened_tables";
select * from table_create_t1;
drop table table_create_t1;

#
# Test for Bug #2985 
#   "Table truncated when creating another table name with Spaces"
#

--error 1103
create table `table_create_t1 `(a int);
--error 1102
create database `db1 `;
--error 1166
create table table_create_t1(`a ` int);

#
# Test for Bug #3481 
#   "Parser permits multiple commas without syntax error"
#

--error 1064
create table table_create_t1 (a int,);
--error 1064
create table table_create_t1 (a int,,b int);
--error 1064
create table table_create_t1 (,b int);

#
# Test create with foreign keys
#

create table table_create_t1 (a int, key(a));
create table table_create_t2 (b int, foreign key(b) references table_create_t1(a), key(b));
drop table if exists table_create_t2,table_create_t1;

#
# Test for CREATE TABLE .. LIKE ..
#

create table table_create_t1(id int not null, name char(20));
insert into table_create_t1 values(10,'mysql'),(20,'monty- the creator');
create table table_create_t2(id int not null);
insert into table_create_t2 values(10),(20);
create table table_create_t3 like table_create_t1;
show create table table_create_t3;
select * from table_create_t3;
create table if not exists table_create_t3 like table_create_t1;
show create table table_create_t3;
select * from table_create_t3;
drop table table_create_t1,table_create_t2,table_create_t3;

# Test types of data for create select with functions
#

create table table_create_t1(a int,b int,c int unsigned,d date,e char,f datetime,g time,h blob);
insert into table_create_t1(a)values(1);
insert into table_create_t1(a,b,c,d,e,f,g,h)
values(2,-2,2,'1825-12-14','a','2003-1-1 3:2:1','4:3:2','binary data');
select * from table_create_t1;
select a, 
    ifnull(b,cast(-7 as signed)) as b, 
    ifnull(c,cast(7 as unsigned)) as c, 
    ifnull(d,cast('2000-01-01' as date)) as d, 
    ifnull(e,cast('b' as char)) as e,
    ifnull(f,cast('2000-01-01' as datetime)) as f, 
    ifnull(g,cast('5:4:3' as time)) as g,
    ifnull(h,cast('yet another binary data' as binary)) as h,
    addtime(cast('1:0:0' as time),cast('1:0:0' as time)) as dd 
from table_create_t1;

create table table_create_t2
select
    a, 
    ifnull(b,cast(-7                        as signed))   as b,
    ifnull(c,cast(7                         as unsigned)) as c,
    ifnull(d,cast('2000-01-01'              as date))     as d,
    ifnull(e,cast('b'                       as char))     as e,
    ifnull(f,cast('2000-01-01'              as datetime)) as f,
    ifnull(g,cast('5:4:3'                   as time))     as g,
    ifnull(h,cast('yet another binary data' as binary))   as h,
    addtime(cast('1:0:0' as time),cast('1:0:0' as time))  as dd
from table_create_t1;
explain table_create_t2;
select * from table_create_t2;
drop table table_create_t1, table_create_t2;

create table table_create_t1 (a tinyint, b smallint, c mediumint, d int, e bigint, f float(3,2), g double(4,3), h decimal(5,4), i year, j date, k timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, l datetime, m enum('a','b'), n set('a','b'), o char(10));
create table table_create_t2 select ifnull(a,a), ifnull(b,b), ifnull(c,c), ifnull(d,d), ifnull(e,e), ifnull(f,f), ifnull(g,g), ifnull(h,h), ifnull(i,i), ifnull(j,j), ifnull(k,k), ifnull(l,l), ifnull(m,m), ifnull(n,n), ifnull(o,o) from table_create_t1;
show create table table_create_t2;
drop table table_create_t1,table_create_t2;

#
# Test of default()
#
create table table_create_t1(str varchar(10) default 'def',strnull varchar(10),intg int default '10',rel double default '3.14');
insert into table_create_t1 values ('','',0,0.0);
describe table_create_t1;
create table table_create_t2 select default(str) as str, default(strnull) as strnull, default(intg) as intg, default(rel) as rel from table_create_t1;
describe table_create_t2;
drop table table_create_t1, table_create_t2;

#
# Bug #2075
#

create table table_create_t1(name varchar(10), age smallint default -1);
describe table_create_t1;
create table table_create_t2(name varchar(10), age smallint default - 1);
describe table_create_t2;
drop table table_create_t1, table_create_t2;

#
# test for bug #1427 "enum allows duplicate values in the list"
#

create table table_create_t1(cenum enum('a'), cset set('b'));
create table table_create_t2(cenum enum('a','a'), cset set('b','b'));
create table table_create_t3(cenum enum('a','A','a','c','c'), cset set('b','B','b','d','d'));
drop table table_create_t1, table_create_t2, table_create_t3;

#
# Bug #1209
#

create database mysqltest;
use mysqltest;
select database();
drop database mysqltest;
select database();

# Connect without a database as user mysqltest_1
create user mysqltest_1;
connect (user1,localhost,mysqltest_1,,*NO-ONE*);
connection user1;
select database(), user();
connection default;
disconnect user1;
drop user mysqltest_1;
use test;

#
# Test for Bug 856 'Naming a key "Primary" causes trouble'
#

--error 1280
create table table_create_t1 (a int, index `primary` (a));
--error 1280
create table table_create_t1 (a int, index `PRIMARY` (a));

create table table_create_t1 (`primary` int, index(`primary`));
show create table table_create_t1;
create table table_create_t2 (`PRIMARY` int, index(`PRIMARY`));
show create table table_create_t2;

create table table_create_t3 (a int);
--error 1280
alter table table_create_t3 add index `primary` (a);
--error 1280
alter table table_create_t3 add index `PRIMARY` (a);

create table table_create_t4 (`primary` int);
alter table table_create_t4 add index(`primary`);
show create table table_create_t4;
create table table_create_t5 (`PRIMARY` int);
alter table table_create_t5 add index(`PRIMARY`);
show create table table_create_t5;

drop table table_create_t1, table_create_t2, table_create_t3, table_create_t4, table_create_t5;

#
# bug #3266 TEXT in CREATE TABLE SELECT
#

CREATE TABLE table_create_t1(id varchar(10) NOT NULL PRIMARY KEY, dsc longtext);
INSERT INTO table_create_t1 VALUES ('5000000001', NULL),('5000000003', 'Test'),('5000000004', NULL);
CREATE TABLE table_create_t2(id varchar(15) NOT NULL, proc varchar(100) NOT NULL, runID varchar(16) NOT NULL, start datetime NOT NULL, PRIMARY KEY  (id,proc,runID));

INSERT INTO table_create_t2 VALUES ('5000000001', 'proc01', '20031029090650', '2003-10-29 13:38:40'),('5000000001', 'proc02', '20031029090650', '2003-10-29 13:38:51'),('5000000001', 'proc03', '20031029090650', '2003-10-29 13:38:11'),('5000000002', 'proc09', '20031024013310', '2003-10-24 01:33:11'),('5000000002', 'proc09', '20031024153537', '2003-10-24 15:36:04'),('5000000004', 'proc01', '20031024013641', '2003-10-24 01:37:29'),('5000000004', 'proc02', '20031024013641', '2003-10-24 01:37:39');

CREATE TABLE table_create_t3  SELECT table_create_t1.dsc,COUNT(DISTINCT table_create_t2.id) AS countOfRuns  FROM table_create_t1 LEFT JOIN table_create_t2 ON (table_create_t1.id=table_create_t2.id) GROUP BY table_create_t1.id;
SELECT * FROM table_create_t3;
drop table table_create_t1, table_create_t2, table_create_t3;

#
# Bug#9666: Can't use 'DEFAULT FALSE' for column of type bool
#
create table table_create_t1 (b bool not null default false);
create table table_create_t2 (b bool not null default true);
insert into table_create_t1 values ();
insert into table_create_t2 values ();
select * from table_create_t1;
select * from table_create_t2;
drop table table_create_t1,table_create_t2;

#
# Bug#10224 - ANALYZE TABLE crashing with simultaneous
# CREATE ... SELECT statement.
# This tests two additional possible errors and a hang if 
# an improper fix is present.
#
create table table_create_t1 (a int);
--error ER_TABLE_EXISTS_ERROR
create table table_create_t1 select * from table_create_t1;
--error ER_WRONG_OBJECT
create table table_create_t2 union = (table_create_t1) select * from table_create_t1;
flush tables with read lock;
unlock tables;
drop table table_create_t1;

#
# Bug#10413: Invalid column name is not rejected
#
--error 1103
create table table_create_t1(column.name int);
--error 1103
create table table_create_t1(test.column.name int);
--error 1102
create table table_create_t1(xyz.table_create_t1.name int);
create table table_create_t1(table_create_t1.name int);
create table table_create_t2(test.table_create_t2.name int);
drop table table_create_t1,table_create_t2;

#
# Bug #12537: UNION produces longtext instead of varchar
#
CREATE TABLE table_create_t1 (f1 VARCHAR(255) CHARACTER SET utf8);
CREATE TABLE table_create_t2 AS SELECT LEFT(f1,171) AS f2 FROM table_create_t1 UNION SELECT LEFT(f1,171) AS f2 FROM table_create_t1;
DESC table_create_t2;
DROP TABLE table_create_t1,table_create_t2;

#
# Bug#12913 Simple SQL can crash server or connection
#
CREATE TABLE table_create_t12913 (f1 ENUM ('a','b')) AS SELECT 'a' AS f1;
SELECT * FROM table_create_t12913;
DROP TABLE table_create_t12913;

#
# Bug#11028: Crash on create table like
#
create database mysqltest;
use mysqltest;
drop database mysqltest;
--error ER_NO_DB_ERROR 
create table test.table_create_t1 like x;
--disable_warnings
drop table if exists test.table_create_t1;
--enable_warnings

#
# Bug #6859: Bogus error message on attempt to CREATE TABLE t LIKE view
#
create database mysqltest;
use mysqltest;
create view v1 as select 'foo' from dual;
--error 1347
create table table_create_t1 like v1;
drop view v1;
drop database mysqltest;
# Bug #6008 MySQL does not create warnings when
# creating database and using IF NOT EXISTS
#
create database mysqltest;
create database if not exists mysqltest character set latin2;
show create database mysqltest;
drop database mysqltest;
use test;
create table table_create_t1 (a int);
create table if not exists table_create_t1 (a int);
drop table table_create_t1;

# BUG#14139
create table table_create_t1 (
  a varchar(112) not null,
  primary key (a)
) select 'test' as a ;
#--warning 1364
show create table table_create_t1;
drop table table_create_t1;

#
# BUG#14480: assert failure in CREATE ... SELECT because of wrong
#            calculation of number of NULLs.
#
CREATE TABLE table_create_t2 (
  a int(11) default NULL
);
insert into table_create_t2 values(111);

#--warning 1364
create table table_create_t1 ( 
  a varchar(12) not null, 
  b int not null, primary key (a)
) select a, 1 as b from table_create_t2 ;
show create table table_create_t1;
drop table table_create_t1;

#--warning 1364
create table table_create_t1 ( 
  a varchar(12) not null, 
  b int not null, primary key (a)
) select a, 1 as c from table_create_t2 ;
show create table table_create_t1;
drop table table_create_t1;

#--warning 1364
create table table_create_t1 ( 
  a varchar(12) not null, 
  b int not null, primary key (a)
) select a, 1 as c from table_create_t2 ;
show create table table_create_t1;
drop table table_create_t1;

#--warning 1364
create table table_create_t1 ( 
  a varchar(12) not null,
  b int not null, primary key (a)
) select 'a' as a , 1 as b from table_create_t2 ;
show create table table_create_t1;
drop table table_create_t1;

#--warning 1364
create table table_create_t1 ( 
  a varchar(12),
  b int not null, primary key (a)
) select 'a' as a , 1 as b from table_create_t2 ;
show create table table_create_t1;
drop table table_create_t1, table_create_t2;

create table table_create_t1 ( 
  a1 int not null,
  a2 int, a3 int, a4 int, a5 int, a6 int, a7 int, a8 int, a9 int
);
insert into table_create_t1 values (1,1,1, 1,1,1, 1,1,1);

#--warning 1364
create table table_create_t2 ( 
  a1 varchar(12) not null,
  a2 int, a3 int, a4 int, a5 int, a6 int, a7 int, a8 int, a9 int,
  primary key (a1)
) select a1,a2,a3,a4,a5,a6,a7,a8,a9 from table_create_t1 ;
drop table table_create_t2;

#--warning 1364
create table table_create_t2 ( 
  a1 varchar(12),
  a2 int, a3 int, a4 int, a5 int, a6 int, a7 int, a8 int, a9 int
) select a1,a2,a3,a4,a5,a6,a7,a8,a9 from table_create_t1;

drop table table_create_t1, table_create_t2;
#--warning 1364
create table table_create_t1 ( 
  a1 int, a2 int, a3 int, a4 int, a5 int, a6 int, a7 int, a8 int, a9 int
);
insert into table_create_t1 values (1,1,1, 1,1,1, 1,1,1);

#--warning 1364
create table table_create_t2 ( 
  a1 varchar(12) not null,
  a2 int, a3 int, a4 int, a5 int, a6 int, a7 int, a8 int, a9 int,
  primary key (a1)
) select a1,a2,a3,a4,a5,a6,a7,a8,a9 from table_create_t1 ;

# Test the default value
drop table table_create_t2;

create table table_create_t2 ( a int default 3, b int default 3)
  select a1,a2 from table_create_t1;
show create table table_create_t2;

drop table table_create_t1, table_create_t2;

#
# Bug #15316 SET value having comma not correctly handled
#
--error 1367
create table table_create_t1(a set("a,b","c,d") not null);

#
# Tests for errors happening at various stages of CREATE TABLES ... SELECT
#
# (Also checks that it behaves atomically in the sense that in case
#  of error it is automatically dropped if it has not existed before.)
#
# Error during open_and_lock_tables() of tables
--error ER_NO_SUCH_TABLE
create table table_create_t1 select * from table_create_t2;
# A special case which is also caught during open tables pahse
--error ER_NO_SUCH_TABLE
create table table_create_t1 select * from table_create_t1;
# Error which happens before select_create::prepare()
--error ER_CANT_AGGREGATE_2COLLATIONS
create table table_create_t1 select coalesce('a' collate latin1_swedish_ci,'b' collate latin1_bin);
# Error during table creation
--error ER_KEY_COLUMN_DOES_NOT_EXITS
create table table_create_t1 (primary key(a)) select "b" as b;
# Error in select_create::prepare() which is not related to table creation
create table table_create_t1 (a int);
create table if not exists table_create_t1 select 1 as a, 2 as b;
drop table table_create_t1;
# Finally error which happens during insert
--error 1030
create table table_create_t1 (primary key (a)) (select 1 as a) union all (select 1 as a);
# What happens if table already exists ?
create table table_create_t1 (i int);
--error ER_TABLE_EXISTS_ERROR
create table table_create_t1 select 1 as i;
create table if not exists table_create_t1 select 1 as i;
select * from table_create_t1;
# After WL#5370, it just generates a warning that the table already exists.
create table if not exists table_create_t1 select * from table_create_t1;
select * from table_create_t1;
drop table table_create_t1;
# Error before select_create::prepare()
--error ER_CANT_AGGREGATE_2COLLATIONS
create table table_create_t1 select coalesce('a' collate latin1_swedish_ci,'b' collate latin1_bin);


# Base vs temporary tables dillema (a.k.a. bug#24508 "Inconsistent
# results of CREATE TABLE ... SELECT when temporary table exists").
# In this situation we either have to create non-temporary table and
# insert data in it or insert data in temporary table without creation of
# permanent table. After patch for Bug#47418, we create the base table and
# instert data into it, even though a temporary table exists with the same
# name.
create temporary table table_create_t1 (j int);
create table if not exists table_create_t1 select 1;
select * from table_create_t1;
drop temporary table table_create_t1;
select * from table_create_t1;
drop table table_create_t1;


#
# CREATE TABLE ... SELECT and LOCK TABLES
#
# There is little sense in using CREATE TABLE ... SELECT under
# LOCK TABLES as it mostly does not work. At least we check that
# the server doesn't crash, hang and produces sensible errors.
# Includes test for bug #20662 "Infinite loop in CREATE TABLE
# IF NOT EXISTS ... SELECT with locked tables".
create table table_create_t1 (i int);
insert into table_create_t1 values (1), (2);
lock tables table_create_t1 read;
--error ER_TABLE_NOT_LOCKED
create table table_create_t2 select * from table_create_t1;
--error ER_TABLE_NOT_LOCKED
create table if not exists table_create_t2 select * from table_create_t1;
unlock tables;
create table table_create_t2 (j int);
lock tables table_create_t1 read;
--error ER_TABLE_NOT_LOCKED
create table table_create_t2 select * from table_create_t1;
# This should not be ever allowed as it will undermine
# lock-all-at-once approach
--error ER_TABLE_NOT_LOCKED
create table if not exists table_create_t2 select * from table_create_t1;
unlock tables;
lock table table_create_t1 read, table_create_t2 read;
--error ER_TABLE_EXISTS_ERROR
create table table_create_t2 select * from table_create_t1;
create table if not exists table_create_t2 select * from table_create_t1;
unlock tables;
lock table table_create_t1 read, table_create_t2 write;
--error ER_TABLE_EXISTS_ERROR
create table table_create_t2 select * from table_create_t1;
# This is the only case which really works.
create table if not exists table_create_t2 select * from table_create_t1;
select * from table_create_t1;
unlock tables;
drop table table_create_t2;

# OTOH CREATE TEMPORARY TABLE ... SELECT should work
# well under LOCK TABLES.
lock tables table_create_t1 read;
create temporary table table_create_t2 select * from table_create_t1;
create temporary table if not exists table_create_t2 select * from table_create_t1;
select * from table_create_t2;
unlock tables;
drop table table_create_t1, table_create_t2;


#
# Bug#21772: can not name a column 'upgrade' when create a table
#
create table table_create_t1 (upgrade int);
drop table table_create_t1;

--disable_warnings
drop table if exists table_create_t1,table_create_t2;
--enable_warnings

#
# Bug#15130:CREATE .. SELECT was denied to use advantages of the SQL_BIG_RESULT.
#
create table table_create_t1(f1 int,f2 int);
insert into table_create_t1 value(1,1),(1,2),(1,3),(2,1),(2,2),(2,3);
flush status;
create table table_create_t2 select sql_big_result f1,count(f2) from table_create_t1 group by f1;
show status like 'handler_read%';
drop table table_create_t1,table_create_t2;

#
# Bug #25162: Backing up DB from 5.1 adds 'USING BTREE' to KEYs on table creates
#

# Show that the old syntax for index type is supported
CREATE TABLE table_create_t1(c1 VARCHAR(33), KEY USING BTREE (c1));
DROP TABLE table_create_t1;

# Show that the new syntax for index type is supported
CREATE TABLE table_create_t1(c1 VARCHAR(33), KEY (c1) USING BTREE);
DROP TABLE table_create_t1;

# Show that in case of multiple index type definitions, the last one takes 
# precedence

CREATE TABLE table_create_t1(c1 VARCHAR(33), KEY USING BTREE (c1) USING HASH) ENGINE=SEQUOIADB;
SHOW INDEX FROM table_create_t1;
DROP TABLE table_create_t1;

CREATE TABLE table_create_t1(c1 VARCHAR(33), KEY USING HASH (c1) USING BTREE) ENGINE=SEQUOIADB;
SHOW INDEX FROM table_create_t1;
DROP TABLE table_create_t1;

#
# Bug#35924 DEFINER should be stored 'quoted' in I_S
#
--error ER_UNKNOWN_ERROR
create user mysqltest_1@'test@test';

--echo #
--echo # BUG#46384 - mysqld segfault when trying to create table with same 
--echo #             name as existing view
--echo #

CREATE TABLE table_create_t1 (a INT);
CREATE TABLE table_create_t2 (a INT);

INSERT INTO table_create_t1 VALUES (1),(2),(3);
INSERT INTO table_create_t2 VALUES (1),(2),(3);

CREATE VIEW v1 AS SELECT table_create_t1.a FROM table_create_t1, table_create_t2;
--error ER_TABLE_EXISTS_ERROR
CREATE TABLE v1 AS SELECT * FROM table_create_t1;

DROP VIEW v1;
DROP TABLE table_create_t1,table_create_t2;

--echo End of 5.0 tests

#
# Test of behaviour with CREATE ... SELECT
#

CREATE TABLE table_create_t1 (a int, b int);
insert into table_create_t1 values (1,1),(1,2);
--error 1030
CREATE TABLE table_create_t2 (primary key (a)) select * from table_create_t1;
# This should give warning
drop table if exists table_create_t2;
--error ER_DUP_ENTRY
CREATE TEMPORARY TABLE table_create_t2 (primary key (a)) select * from table_create_t1;
# This should give warning
drop table if exists table_create_t2;
CREATE TABLE table_create_t2 (a int, b int, primary key (a));
--error 1030
INSERT INTO table_create_t2 select * from table_create_t1;
SELECT * from table_create_t2;
TRUNCATE table table_create_t2;
--error 1030
INSERT INTO table_create_t2 select * from table_create_t1;
SELECT * from table_create_t2;
drop table table_create_t2;

#
# Test incorrect database names
#

--error ER_TOO_LONG_IDENT
CREATE DATABASE aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;
--error ER_TOO_LONG_IDENT
DROP DATABASE aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;

--error ER_TOO_LONG_IDENT
USE aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;
--error ER_TOO_LONG_IDENT
SHOW CREATE DATABASE aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;

#
# Bug#21136 CREATE TABLE SELECT within CREATE TABLE SELECT causes server crash
#

--disable_warnings
drop table if exists table_create_t1,table_create_t2,table_create_t3;
drop function if exists f1;
--enable_warnings

--delimiter |
create function f1() returns int
begin
  declare res int;
  create temporary table table_create_t3 select 1 i;
  set res:= (select count(*) from table_create_t1);
  drop temporary table table_create_t3;
  return res;
end|
--delimiter ;
create table table_create_t1 as select 1;
create table table_create_t2 as select f1() from table_create_t1;
drop table table_create_t1,table_create_t2;
drop function f1;

###########################################################################

--echo
--echo # --
--echo # -- Bug#21380: DEFAULT definition not always transfered by CREATE
--echo # -- TABLE/SELECT to the new table.
--echo # --
--echo


--disable_warnings
DROP TABLE IF EXISTS table_create_t1;
DROP TABLE IF EXISTS table_create_t2;
--enable_warnings

--echo

CREATE TABLE table_create_t1(
  c1 INT DEFAULT 12 COMMENT 'column1',
  c2 INT NULL COMMENT 'column2',
  c3 INT NOT NULL COMMENT 'column3',
  c4 VARCHAR(255) CHARACTER SET utf8 NOT NULL DEFAULT 'a',
  c5 VARCHAR(255) COLLATE utf8_unicode_ci NULL DEFAULT 'b',
  c6 VARCHAR(255))
  COLLATE latin1_bin;

--echo

SHOW CREATE TABLE table_create_t1;

--echo

CREATE TABLE table_create_t2 AS SELECT * FROM table_create_t1;

--echo

SHOW CREATE TABLE table_create_t2;

--echo

DROP TABLE table_create_t2;
DROP TABLE table_create_t1;

--echo
--echo # -- End of test case for Bug#21380.

###########################################################################

--echo
--echo # --
--echo # -- Bug#18834: ALTER TABLE ADD INDEX on table with two timestamp fields
--echo # --
--echo

--disable_warnings
DROP TABLE IF EXISTS table_create_t1;
DROP TABLE IF EXISTS table_create_t2;
DROP TABLE IF EXISTS table_create_t3;
--enable_warnings

--echo

CREATE TABLE table_create_t1(c1 TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, c2 TIMESTAMP NOT NULL DEFAULT '0000-00-00 00:00:00');

--echo

SET sql_mode = 'NO_ZERO_DATE';

--echo
CREATE TABLE table_create_t2(c1 TIMESTAMP, c2 TIMESTAMP DEFAULT 0);
DROP TABLE table_create_t2;


--echo
--error ER_INVALID_DEFAULT
CREATE TABLE table_create_t2(c1 TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, c2 TIMESTAMP NOT NULL);

--echo
--echo # -- Check that NULL column still can be created.
CREATE TABLE table_create_t2(c1 TIMESTAMP NULL);

--echo
--echo # -- Check DATETIME.
SET sql_mode = '';

--echo

CREATE TABLE table_create_t3(c1 DATETIME NOT NULL) ENGINE=SEQUOIADB;
INSERT INTO table_create_t3 VALUES (0);

--echo
SET sql_mode = TRADITIONAL;

--echo
--echo # -- Cleanup.

SET sql_mode = '';
DROP TABLE table_create_t1;
DROP TABLE table_create_t2;
DROP TABLE table_create_t3;

--echo # --
--echo # -- Bug#45829: CREATE TABLE TRANSACTIONAL PAGE_CHECKSUM ROW_FORMAT=PAGE accepted, does nothing
--echo # --
--echo

--disable_warnings
drop table if exists table_create_t1,table_create_t2,table_create_t3;
--enable_warnings
--error ER_PARSE_ERROR
create table table_create_t1 (a int) transactional=0;
--error ER_PARSE_ERROR
create table table_create_t2 (a int) page_checksum=1;
--error ER_PARSE_ERROR
create table table_create_t3 (a int) row_format=page;

--echo #
--echo # Bug #48800 CREATE TABLE t...SELECT fails if t is a 
--echo #            temporary table
--echo #

CREATE TEMPORARY TABLE table_create_t1 (a INT);
CREATE TABLE table_create_t1 (a INT);

CREATE TEMPORARY TABLE table_create_t2 (a INT);
CREATE VIEW table_create_t2 AS SELECT 1;

CREATE TABLE table_create_t3 (a INT);
CREATE TEMPORARY TABLE table_create_t3 SELECT 1; 

CREATE TEMPORARY TABLE table_create_t4 (a INT);
CREATE TABLE table_create_t4 AS SELECT 1;

DROP TEMPORARY TABLE table_create_t1, table_create_t2, table_create_t3, table_create_t4;
DROP TABLE table_create_t1, table_create_t3, table_create_t4;
DROP VIEW table_create_t2;

--echo #
--echo # Bug #49193 CREATE TABLE reacts differently depending 
--echo #            on whether data is selected or not
--echo #

CREATE TEMPORARY TABLE table_create_t2 (ID INT);
INSERT INTO table_create_t2 VALUES (1),(2),(3);

# Case 1 -- did not fail
CREATE TEMPORARY TABLE table_create_t1 (ID INT);
CREATE TABLE IF NOT EXISTS table_create_t1 (ID INT);
INSERT INTO table_create_t1 SELECT * FROM table_create_t2;
SELECT * FROM table_create_t1;
DROP TEMPORARY TABLE table_create_t1;
SELECT * FROM table_create_t1;

DROP TABLE table_create_t1;

# Case 2 -- The DROP TABLE table_create_t1 failed with 
#  Table 'test.table_create_t1' doesn't exist in the SELECT *
# as the (permanent) table was not created
CREATE TEMPORARY TABLE table_create_t1 (ID INT);
CREATE TABLE IF NOT EXISTS table_create_t1 SELECT * FROM table_create_t2;
SELECT * FROM table_create_t1;
DROP TEMPORARY TABLE table_create_t1;
SELECT * FROM table_create_t1;

DROP TABLE table_create_t1;

# Case 3 -- The CREATE TABLE failed with
#  Table 'table_create_t1' already exists
CREATE TEMPORARY TABLE table_create_t1 (ID INT);
CREATE TABLE table_create_t1 SELECT * FROM table_create_t2;
SELECT * FROM table_create_t1;
DROP TEMPORARY TABLE table_create_t1;
SELECT * FROM table_create_t1;
 
DROP TABLE table_create_t1;
 
DROP TEMPORARY TABLE table_create_t2;


--echo # 
--echo # Bug #22909 "Using CREATE ... LIKE is possible to create field
--echo #             with invalid default value"
--echo #
--echo # Altough original bug report suggests to use older version of MySQL
--echo # for producing .FRM with invalid defaults we use sql_mode to achieve
--echo # the same effect.
--disable_warnings
drop tables if exists table_create_t1, table_create_t2;
--enable_warnings
--echo # Attempt to create table with invalid default should fail in normal mode
--error ER_INVALID_DEFAULT
create table table_create_t1 (dt datetime default '2008-02-31 00:00:00');
set @old_mode= @@sql_mode;
set @@sql_mode='ALLOW_INVALID_DATES';
--echo # The same should be possible in relaxed mode
create table table_create_t1 (dt datetime default '2008-02-31 00:00:00');
set @@sql_mode= @old_mode;
--echo # In normal mode attempt to create copy of table with invalid
--echo # default should fail
--error ER_INVALID_DEFAULT
create table table_create_t2 like table_create_t1;
set @@sql_mode='ALLOW_INVALID_DATES';
--echo # But should work in relaxed mode
create table table_create_t2 like table_create_t1;
--echo # Check that table definitions match
show create table table_create_t1;
show create table table_create_t2;
set @@sql_mode= @old_mode;
drop tables table_create_t1, table_create_t2;
#
# Bug#47132 CREATE TABLE.. SELECT.. data not inserted if table
# is view over multiple tables
#

CREATE TABLE table_create_t1 (id int);
CREATE TABLE table_create_t2 (id int);
INSERT INTO table_create_t1 VALUES (1), (1);
INSERT INTO table_create_t2 VALUES (2), (2);

CREATE VIEW v1 AS SELECT id FROM table_create_t2;
CREATE TABLE IF NOT EXISTS v1(a int, b int) SELECT id, id FROM table_create_t1;
SHOW CREATE TABLE v1;
SELECT * FROM table_create_t2;
SELECT * FROM v1;
DROP VIEW v1;

CREATE TEMPORARY TABLE ttable_create_t1 AS SELECT id FROM table_create_t2;
CREATE TEMPORARY TABLE IF NOT EXISTS ttable_create_t1(a int, b int) SELECT id, id FROM table_create_t1;
SELECT * FROM table_create_t2;
SELECT * FROM ttable_create_t1;
DROP TEMPORARY TABLE ttable_create_t1;

DROP TABLE table_create_t1, table_create_t2;


--echo #
--echo # WL#5370 "Changing 'CREATE TABLE IF NOT EXISTS ... SELECT'
--echo # behaviour.
--echo # 

--echo #
--echo # 1. Basic case: a base table.
--echo # 

create table if not exists table_create_t1 (a int) select 1 as a;
select * from table_create_t1;
--error ER_TABLE_EXISTS_ERROR
create table table_create_t1 (a int) select 2 as a;
select * from table_create_t1;
--echo # Produces an essential warning ER_TABLE_EXISTS.
create table if not exists table_create_t1 (a int) select 2 as a;
--echo # No new data in table_create_t1.
select * from table_create_t1;
drop table table_create_t1;

--echo # 
--echo # 2. A temporary table.
--echo #

create temporary table if not exists table_create_t1 (a int) select 1 as a;
select * from table_create_t1;
--error ER_TABLE_EXISTS_ERROR
create temporary table table_create_t1 (a int) select 2 as a;
select * from table_create_t1;
--echo # An essential warning.
create temporary table if not exists table_create_t1 (a int) select 2 as a;
--echo # No new data in table_create_t1.
select * from table_create_t1;
drop temporary table table_create_t1;

--echo # 
--echo # 3. Creating a base table in presence of a temporary table.
--echo #

create table table_create_t1 (a int);
--echo # Create a view for convenience of querying table_create_t1 shadowed by a temp.
create view v1 as select a from table_create_t1;
drop table table_create_t1;
create temporary table table_create_t1 (a int) select 1 as a;
create table if not exists table_create_t1 (a int) select 2 as a;
select * from table_create_t1;
select * from v1;
--echo # Note: an essential warning.
create table if not exists table_create_t1 (a int) select 3 as a;
select * from table_create_t1;
select * from v1;
drop temporary table table_create_t1;
select * from table_create_t1;
drop view v1;
drop table table_create_t1;

--echo # 
--echo # 4. Creating a temporary table in presence of a base table.
--echo #

create table table_create_t1 (a int) select 1 as a;
create temporary table if not exists table_create_t1 select 2 as a;
select * from table_create_t1;
--echo # Note: an essential warning.
create temporary table if not exists table_create_t1 select 3 as a;
select * from table_create_t1;
drop temporary table table_create_t1;
select * from table_create_t1;
drop table table_create_t1;

--echo #
--echo # 5. Creating a base table in presence of an updatable view.
--echo # 
create table table_create_t2 (a int unique);
create view table_create_t1 as select a from table_create_t2;
insert into table_create_t1 (a) values (1);
--error ER_TABLE_EXISTS_ERROR
create table table_create_t1 (a int);
--echo # Note: an essential warning.
create table if not exists table_create_t1 (a int);
--error ER_TABLE_EXISTS_ERROR
create table table_create_t1 (a int) select 2 as a;
select * from table_create_t1;
--echo # Note: an essential warning.
create table if not exists table_create_t1 (a int) select 2 as a;
select * from table_create_t1;
select * from table_create_t2;
create temporary table if not exists table_create_t1 (a int) select 3 as a;
select * from table_create_t1;
select * from table_create_t2;
--echo # Note: an essential warning.
create temporary table if not exists table_create_t1 (a int) select 4 as a;
select * from table_create_t1;
select * from table_create_t2;
drop temporary table table_create_t1;

--echo #
--echo # Repeating the test with a non-updatable view.
--echo #
drop view table_create_t1;
create view table_create_t1 as select a + 5 as a from table_create_t2;
--error ER_NONUPDATEABLE_COLUMN
insert into table_create_t1 (a) values (1);
--error ER_NONUPDATEABLE_COLUMN
update table_create_t1 set a=3 where a=2;

--error ER_TABLE_EXISTS_ERROR
create table table_create_t1 (a int);
--echo # Note: an essential warning.
create table if not exists table_create_t1 (a int);
--error ER_TABLE_EXISTS_ERROR
create table table_create_t1 (a int) select 2 as a;
select * from table_create_t1;
--echo # Note: an essential warning.
create table if not exists table_create_t1 (a int) select 2 as a;
select * from table_create_t1;
select * from table_create_t2;
create temporary table if not exists table_create_t1 (a int) select 3 as a;
select * from table_create_t1;
select * from table_create_t2;
--echo # Note: an essential warning.
create temporary table if not exists table_create_t1 (a int) select 4 as a;
select * from table_create_t1;
select * from table_create_t2;
drop temporary table table_create_t1;
drop view table_create_t1;
drop table table_create_t2;

--echo # Note: an essential warning.
create table if not exists table_create_t1 (a int);
--error ER_TABLE_EXISTS_ERROR
create table table_create_t1 (a int) select 2 as a;
select * from table_create_t1;
--echo # Note: an essential warning.
create table if not exists table_create_t1 (a int) select 2 as a;
select * from table_create_t1;
create temporary table if not exists table_create_t1 (a int) select 3 as a;
select * from table_create_t1;
--echo # Note: an essential warning.
create temporary table if not exists table_create_t1 (a int) select 4 as a;
select * from table_create_t1;
drop temporary table table_create_t1;
drop view if exists table_create_t1;

--echo #
--echo # 1. The function updates a base table
--echo #
create table table_create_t2(c1 int);
drop table if exists table_create_t1,table_create_t2;

--echo #
--echo # 2. The function updates a view which derives from a base table
--echo #
create table table_create_t3(c1 int);
create view table_create_t2 as select c1 from table_create_t3;

--error 1305
create table table_create_t1 select f();
--error 1305
create temporary table table_create_t1 select f();

drop view table_create_t2;

--echo #
--echo # 3. The function updates a view which derives from two base tables
--echo #
create table table_create_t4(c1 int);
create view table_create_t2 as select table_create_t3.c1 as c1 from table_create_t3, table_create_t4;

--error 1305
create table table_create_t1 select f();
--error 1305
create temporary table table_create_t1 select f();

drop view table_create_t2;
drop tables table_create_t3, table_create_t4;

#
# Test comment 
#   
# create table with sharding range
create table table_create_t1 (a varchar(255)) comment = "{table_options: {ShardingKey:{a:1,b:-1},ShardingType:\"range\"}}";
show create table table_create_t1;
# insert
insert into table_create_t1 values ('a');
insert into table_create_t1 values ('a ');
insert into table_create_t1 values ('a  ');
insert into table_create_t1 values ('aaaaaaa');
insert into table_create_t1 values ('aaaaaaaaaaaaaaaa');
# create table with sharding hash
create table table_create_t2 (a varchar(255)) comment = "{table_options: {ShardingKey:{a:1,b:-1},ShardingType:\"hash\"}}";
show create table table_create_t2;
insert into table_create_t1 values ('a');
insert into table_create_t1 values ('a ');
insert into table_create_t1 values ('a  ');
insert into table_create_t1 values ('bbbb');
insert into table_create_t1 values ('bbbbbbbbbbbbbbbbbbb');
# create table with maincl
create table table_create_t3 (a varchar(255)) comment = "{table_options: {ShardingKey:{a:1,b:-1},IsMainCL:true}}";
show create table table_create_t1;
insert into table_create_t1 values ('a');
insert into table_create_t1 values ('a ');
insert into table_create_t1 values ('a  ');
insert into table_create_t1 values ('cccccc');
insert into table_create_t1 values ('ccccccccccccccc');
# update
update table_create_t1 a, table_create_t2 b set a.a = b.a where a.a <> b.a;
update table_create_t1 a, table_create_t3 b set b.a = a.a where a.a <> b.a;
# delete
delete table_create_t2, table_create_t3 from table_create_t2, table_create_t3 where table_create_t2.a = table_create_t3.a;
drop table table_create_t1,table_create_t2,table_create_t3;
# create table with invalid comment, must fail
--error 1030
create table table_create_t1 (a varchar(255)) comment = "{table_options: {ABC : 1}}";
--error 1030
create table table_create_t1 (a varchar(255)) comment = "{table_options: {ShardingKey: 1}}";

--echo #
--echo # Bug#11746295 - 25168: "INCORRECT TABLE NAME" INSTEAD OF "IDENTIFIER TOO
--echo #                       LONG" IF TABLE NAME > 64 CHARACTERS
--echo #

--error ER_TOO_LONG_IDENT
CREATE TABLE t01234567890123456789012345678901234567890123456789012345678901234567890123456789(a int);
--error ER_TOO_LONG_IDENT
CREATE DATABASE t01234567890123456789012345678901234567890123456789012345678901234567890123456789;

--source suite/sequoiadb_datatype/include/uninstall_sequoiadb.inc
